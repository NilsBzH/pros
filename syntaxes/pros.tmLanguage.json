{
	"$schema": "https://raw.githubusercontent.com/NilsBzH/pros/main/syntaxes/pros.tmLanguage.json",
	"name": "PROS macro language",
	"patterns": [
		{
			"include": "#comment"
		},
		{
			"include": "#constant"
		},
		{
			"include": "#entity"
		},
		{
			"include": "#invalid"
		},
		{
			"include": "#keyword"
		},
		{
			"include": "#markup"
		},
		{
			"include": "#meta"
		},
		{
			"include": "#storage"
		},
		{
			"include": "#string"
		},
		{
			"include": "#support"
		},
		{
			"include": "#variable"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#numeric"
		},
		{
			"include": "#reserved-words"
		},
		{
			"include": "#ctrl-statements"
		}
	],
	"repository": {
		"comment": {
			"patterns": [
				{
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.pros"
						}
					},
					"match": "/\\*\\*/",
					"name": "comment.block.enpty.pros"
				},
				{
					"include": "#comments-inline"
				}
			]
		},
		"comments-inline": {
			"patterns": [
				{
					"begin": "/\\*",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.pros"
						}
					},
					"end": "\\*/",
					"name": "comment.block.pros"
				}
			]
		},
		"constant": {
			"patterns": [
				{
					"match": "(?i:\\b(true|false|vrai|faux)\\b)",
					"name": "constant.language.pros"
				},
				{
					"match": "-?\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f)?\\b",
					"name": "constant.numeric.pros"
				}
			]
		},
		"keyword": {
			"patterns": [
				{
					"match": "(?i:\\b(if|si|else|sinon|else_if|sinon_si|end_if|fin_si|repeat|repeter|until|jusqu_a|while|tant_que|end_while|fin_tant_que)\\b)",
					"name": "keyword.control.pros"
				},
				{
					"match": "(?i:\\b(ABS|ACOS|TOUT|ASCII|ASIN|ATAN|ATAN2|BINAIRE|BINARY|CHANGER_ENVIRONNEMENT|CHANGE_ENVIRONMENT|FERMER_FICHIER|CLOSE_FILE|CONCAT_ANC|APPEND|COS|CREER_ENVIRONNEMENT|CREATE_ENVIRONMENT|DATE|DEFINITION|DEFINE|SUPPRIMER|DELETE|SUPPRIMER_ENVIRONNEMENT|DELETE_ENVIRONMENT|SUPPRIMER_MACRO|DELETE_MACRO|SUPPRIMER_VAR|DELETE_VAR|DETAIL|AFFICHER|DISPLAY|DIV|E|SINON|ELSE|SINON_SI|ELSE_IF|FIN_DEFINITION|END_DEFINE|FIN_SI|END_IF|FIN_TANT_QUE|END_WHILE|ENVIRONNEMENT|ENVIRONMENT|ERREUR|ERROR|EXECUTER|EXECUTE|EXP|CHAMP_SEP|FIELD_SEP|ENT|INT|FNAWK|FRACT|SI|IF|DANS|IN|GAUCHE|LEFT|LONGUEUR|LENGTH|LISTER|LIST|LN|CHARGER|LOAD|LOG|ET|AND|OU|OR|OU_EXCL|EXOR|MINUSCULE|LOWER|MACRO|MEMOIRE|MEMORY|MESSAGE|MODULO|RESTE|MOD|NOM|NAME|NON|NOT|NOMBRE|NUMBER|OUVRIR_FICHIER|OPEN_FILE|PI|PUISSANCE|POWER|LIRE_FICHIER|READ_FILE|REPETER|REPEAT|DROITE|RIGHT|ARRONDI|ROUND|RPT|SAUVER|SAVE|SIN|SQL_COMMIT|SQL_CONNECT|SQL_CREATE|SQL_DECONNECT|SQL_DISCONNECT|SQL_DECONNECT_RB|SQL_DISCONNECT_RB|SQL_DELETE|SQL_DROP|SQL_INSERT|SQL_QUERY|SQL_ROLLBACK|SQL_UPDATE|SQRT|CARRE|SQR|CHAINE| STR|SOUS_CHAINE|SUBSTR|SUPP_ANC|DEL_OLD|SYSTEME|SYSTEM|TAN|HEURE|TIME|TRACE|TRACE_FIN|TRACE_OFFOTEBLANCS|TRIM|TYPEVAR|JUSQU_A|UNTIL|MAJUSCULE|UPPER|VARIABLE|VERSION|TANT_QUE|WHILE|ECRIRE_FICHIER|WRITE_FILE|SQL_EXPORT|FORCE|WINEXE|BEEP|ACCES_FICHIER|FILE_ACCESS|TROUVER_CHAINE|FIND_STR|REMPLACER_CHAINE|REPLACE_STR|SORTIE_BOUCLE|EXIT_LOOP|SORTIE_MACRO|EXIT_MACRO|LIRE_TABLE|READ_TABLE|SELON|USING|AVEC|WITH|WINEXE32|RACINE|SUPER|COURANT|abs|acos|tout|ascii|asin|atan|atan2|binaire|binary|changer_environnement|change_environment|fermer_fichier|close_file|concat_anc|append|cos|creer_environnement|create_environment|date|definition|define|supprimer|delete|supprimer_environnement|delete_environment|supprimer_macro|delete_macro|supprimer_var|delete_var|detail|afficher|display|div|e|sinon|else|sinon_si|else_if|fin_definition|end_define|fin_si|end_if|fin_tant_que|end_while|environnement|environment|erreur|error|executer|execute|exp|champ_sep|field_sep|ent|int|fnawk|fract|si|if|dans|in|gauche|left|longueur|length|lister|list|ln|charger|load|log|et|and|ou|or|ou_excl|exor|minuscule|lower|macro|memoire|memory|message|modulo|reste|mod|nom|name|non|not|nombre|number|ouvrir_fichier|open_file|pi|puissance|power|lire_fichier|read_file|repeter|repeat|droite|right|arrondi|round|rpt|sauver|save|sin|sql_commit|sql_connect|sql_create|sql_deconnect|sql_disconnect|sql_deconnect_rb|sql_disconnect_rb|sql_delete|sql_drop|sql_insert|sql_query|sql_rollback|sql_update|sqrt|carre|sqr|chaine| str|sous_chaine|substr|supp_anc|del_old|systeme|system|tan|heure|time|trace|trace_fin|trace_off|oteblancs|trim|typevar|jusqu_a|until|majuscule|upper|variable|version|tant_que|while|ecrire_fichier|write_file|sql_export|force|winexe|beep|acces_fichier|file_access|trouver_chaine|find_str|remplacer_chaine|replace_str|sortie_boucle|exit_loop|sortie_macro|exit_macro|lire_table|read_table|selon|using|avec|with|winexe32|racine|super|courant)\\b)",
					"name": "keyword.other.pros"
				}
			]
		},
		"string": {
            "patterns": [
				{
                    "begin": "\"",
                    "end": "\"",
                    "name": "string.quoted.double.pros",
                    "patterns": [{
                            "match": "\\\\.",
                            "name": "constant.character.escape.pros"
                        }
                    ]
                },
				{
                    "begin": "'",
                    "end": "'",
                    "name": "string.quoted.single.pros",
                    "patterns": [{
                            "match": "\\\\.",
                            "name": "constant.character.escape.pros"
                        }
                    ]
                }
            ]
        },
		"variable": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "storage.type.pros"
						},
						"2": {
							"name": "variable.other.pros"
						}
					},
					"match": "(?i:(local|soit|let)\\s*(?:(\\b[a-zA-Z_x7f-xff][a-zA-Z0-9_x7f-xff]*?\\b)\\s*(,?)))",
					"name": "variable.other.pros"
				},
				{
					"match": "(?i:\\s*\\b(let|soit|local)\\b\\s*)",
					"name": "storage.type.pros"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"match": "\\+|\\-|\\*|\\/|%|\\*\\*|\\^|\\b(modulo|power)\\b",
					"name": "keyword.operators.arithmetic.pros"
				},
				{
					"match": "\\b(or|and|ex_or|not|ou|et)\\b",
					"name": "keyword.operators.logical.pros"
				},
				{
					"match": ":=",
					"name": "keyword.operators.assignement.pros"
				},
				{
					"match": "=|<>|<|>|<=|>=",
					"name": "keyword.operators.relational.pros"
				}
			]
		}
	},
	"scopeName": "source.pros"
}